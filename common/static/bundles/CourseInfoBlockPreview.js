(function(e, a) { for(var i in a) e[i] = a[i]; }(window, webpackJsonp([27,26,28,29],{

/***/ "./common/static/xmodule/modules/js/001-3ed86006526f75d6c844739193a84c11.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*** IMPORTS FROM imports-loader ***/
(function () {

  // Once generated by CoffeeScript 1.9.3, but now lives as pure JS
  /* eslint-disable */
  (function () {
    this.HTMLModule = function () {
      function HTMLModule(element) {
        this.element = element;
        this.el = $(this.element);
        JavascriptLoader.executeModuleScripts(this.el);
        Collapsible.setCollapsibles(this.el);
        if (typeof MathJax !== "undefined" && MathJax !== null) {
          MathJax.Hub.Queue(["Typeset", MathJax.Hub, this.el[0]]);
        }
        if (typeof setupFullScreenModal !== "undefined" && setupFullScreenModal !== null) {
          setupFullScreenModal();
        }
      }

      HTMLModule.prototype.$ = function (selector) {
        return $(selector, this.el);
      };

      return HTMLModule;
    }();
  }).call(this);
}).call(window);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),

/***/ "./common/static/xmodule/modules/js/002-3918b2d4f383c04fed8227cc9f523d6e.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*** IMPORTS FROM imports-loader ***/
(function () {

    (function () {
        'use strict';

        this.JavascriptLoader = function () {
            function JavascriptLoader() {}

            /**
             * Set of library functions that provide common interface for javascript loading
             * for all module types. All functionality provided by JavascriptLoader should take
             * place at module scope, i.e. don't run jQuery over entire page.
             *
             * executeModuleScripts:
             *     Scan the module ('el') for "script_placeholder"s, then:
             *
             *     1) Fetch each script from server
             *     2) Explicitly attach the script to the <head> of document
             *     3) Explicitly wait for each script to be loaded
             *     4) Return to callback function when all scripts loaded
             */
            JavascriptLoader.executeModuleScripts = function (el, callback) {
                var callbackCalled, completed, completionHandlerGenerator, loaded, placeholders;
                if (!callback) {
                    callback = null; // eslint-disable-line no-param-reassign
                }
                placeholders = el.find('.script_placeholder');
                if (placeholders.length === 0) {
                    if (callback !== null) {
                        callback();
                    }
                    return [];
                }
                // TODO: Verify the execution order of multiple placeholders
                completed = function () {
                    var i, ref, results;
                    results = [];
                    for (i = 1, ref = placeholders.length; ref >= 1 ? i <= ref : i >= ref; ref >= 1 ? ++i : --i) {
                        results.push(false);
                    }
                    return results;
                }();
                callbackCalled = false;
                completionHandlerGenerator = function completionHandlerGenerator(index) {
                    return function () {
                        var allComplete, flag, i, len;
                        allComplete = true;
                        completed[index] = true;
                        for (i = 0, len = completed.length; i < len; i++) {
                            flag = completed[i];
                            if (!flag) {
                                allComplete = false;
                                break;
                            }
                        }
                        if (allComplete && !callbackCalled) {
                            callbackCalled = true;
                            if (callback !== null) {
                                return callback();
                            }
                        }
                        return undefined;
                    };
                };
                // Keep a map of what sources we're loaded from, and don't do it twice.
                loaded = {};
                return placeholders.each(function (index, placeholder) {
                    var s, src;
                    // TODO: Check if the script already exists in DOM. If so, (1) copy it
                    // into memory; (2) delete the DOM script element; (3) reappend it.
                    // This would prevent memory bloat and save a network request.
                    src = $(placeholder).attr('data-src');
                    if (!(src in loaded)) {
                        loaded[src] = true;
                        s = document.createElement('script');
                        s.setAttribute('src', src);
                        s.setAttribute('type', 'text/javascript');
                        s.onload = completionHandlerGenerator(index);
                        // Need to use the DOM elements directly or the scripts won't execute properly.
                        $('head')[0].appendChild(s);
                    } else {
                        // just call the completion callback directly, without reloading the file
                        completionHandlerGenerator(index)();
                    }
                    return $(placeholder).remove();
                });
            };

            return JavascriptLoader;
        }();
    }).call(this);
}).call(window);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),

/***/ "./common/static/xmodule/modules/js/003-d47e678753905042c21bbc110fb3f8d8.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*** IMPORTS FROM imports-loader ***/
(function () {

    (function (undefined) {
        'use strict';

        // [module Collapsible]
        //
        // [description]
        //     Set of library functions that provide a simple way to add
        //     collapsible functionality to elements.

        this.Collapsible = {
            setCollapsibles: setCollapsibles,
            toggleFull: toggleFull,
            toggleHint: toggleHint
        };

        return;

        // [function setCollapsibles]
        //
        // [description]
        //     Scan element's content for generic collapsible containers.
        //
        // [params]
        //     el: container
        function setCollapsibles(el) {
            var linkBottom, linkTop, short_custom;

            linkTop = '<a href="#" class="full full-top">See full output</a>';
            linkBottom = '<a href="#" class="full full-bottom">See full output</a>';

            // Standard longform + shortfom pattern.
            el.find('.longform').hide();
            el.find('.shortform').append(linkTop, linkBottom);

            // Custom longform + shortform text pattern.
            short_custom = el.find('.shortform-custom');

            // Set up each one individually.
            short_custom.each(function (index, elt) {
                var close_text, open_text;

                open_text = $(elt).data('open-text');
                close_text = $(elt).data('close-text');
                $(elt).append("<a href='#' class='full-custom'>" + open_text + '</a>');

                $(elt).find('.full-custom').click(function (event) {
                    Collapsible.toggleFull(event, open_text, close_text);
                });
            });

            // Collapsible pattern.
            el.find('.collapsible header + section').hide();

            // Set up triggers.
            el.find('.full').click(function (event) {
                Collapsible.toggleFull(event, 'See full output', 'Hide output');
            });
            el.find('.collapsible header a').click(Collapsible.toggleHint);
        }

        // [function toggleFull]
        //
        // [description]
        //     Toggle the display of full text for a collapsible element.
        //
        // [params]
        //     event: jQuery event object associated with the event that
        //         triggered this callback function.
        //     open_text: text that should be displayed when the collapsible
        //         is open.
        //     close_text: text that should be displayed when the collapsible
        //         is closed.
        function toggleFull(event, open_text, close_text) {
            var $el, new_text, parent;

            event.preventDefault();

            parent = $(event.target).parent();
            parent.siblings().slideToggle();
            parent.parent().toggleClass('open');

            if ($(event.target).text() === open_text) {
                new_text = close_text;
            } else {
                new_text = open_text;
            }

            if ($(event.target).hasClass('full')) {
                $el = parent.find('.full');
            } else {
                $el = $(event.target);
            }

            $el.text(new_text);
        }

        // [function toggleHint]
        //
        // [description]
        //     Toggle the collapsible open to show the hint.
        //
        // [params]
        //     event: jQuery event object associated with the event that
        //         triggered this callback function.
        function toggleHint(event) {
            event.preventDefault();

            $(event.target).parent().siblings().slideToggle();
            $(event.target).parent().parent().toggleClass('open');
        }
    }).call(this);
}).call(window);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),

/***/ "./common/static/xmodule/modules/js/004-866df6ea65aa331217cdf46290ead28e.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($, _) {/*** IMPORTS FROM imports-loader ***/
(function () {

    var setupFullScreenModal = function setupFullScreenModal() {
        // Setup full screen image modal.
        // Executed from HTMLModule in display.js.
        $('a.modal-content').each(function () {
            var smallImageObject = $(this).children();
            var largeImageSRC = $(this).attr('href');

            // if contents of zoomable link is image and large image link exists: setup modal
            if (smallImageObject.is('img') && largeImageSRC) {
                var data = {
                    smallHTML: $(this).html(),
                    largeALT: smallImageObject.attr('alt'),
                    largeSRC: largeImageSRC
                };
                var html = _.template($('#image-modal-tpl').text())(data);
                // xss-lint: disable=javascript-jquery-insertion
                $(this).replaceWith(html);
            }
        });
        $('.wrapper-modal-image .image-wrapper img').each(function () {
            var draggie = new Draggabilly(this, { containment: true });
            draggie.disable();
            $(this).closest('.image-modal').data('draggie', draggie);
        });

        // Opening and closing image modal on clicks
        $('.wrapper-modal-image .image-link').click(function () {
            $(this).siblings('.image-modal').addClass('image-is-fit-to-screen');
            $('body').css('overflow', 'hidden');
        });

        // variable to detect when modal is being "hovered".
        // Done this way as jquery doesn't support the :hover psudo-selector as expected.
        var imageModalImageHover = false;
        $('.wrapper-modal-image .image-content img, .wrapper-modal-image .image-content .image-controls').hover(function () {
            imageModalImageHover = true;
        }, function () {
            imageModalImageHover = false;
        });

        // prevent image control button links from scrolling
        $('.modal-ui-icon').click(function (event) {
            event.preventDefault();
        });

        // Define function to close modal
        function closeModal(imageModal) {
            imageModal.removeClass('image-is-fit-to-screen').removeClass('image-is-zoomed');
            $('.wrapper-modal-image .image-content .image-controls .modal-ui-icon.action-zoom-in').removeClass('is-disabled').attr('aria-disabled', false);
            $('.wrapper-modal-image .image-content .image-controls .modal-ui-icon.action-zoom-out').addClass('is-disabled').attr('aria-disabled', true);
            var currentDraggie = imageModal.data('draggie');
            currentDraggie.disable();
            $('body').css('overflow', 'auto');
        }

        // Click outside of modal to close it.
        $('.wrapper-modal-image .image-modal').click(function () {
            if (!imageModalImageHover) {
                closeModal($(this));
            }
        });

        // Click close icon to close modal.
        $('.wrapper-modal-image .image-content .action-remove').click(function () {
            closeModal($(this).closest('.image-modal'));
        });

        // zooming image in modal and allow it to be dragged
        // Make sure it always starts zero position for below calcs to work
        $('.wrapper-modal-image .image-content .image-controls .modal-ui-icon').click(function () {
            if (!$(this).hasClass('is-disabled')) {
                var mask = $(this).closest('.image-content');

                var imageModal = $(this).closest('.image-modal');
                var img = imageModal.find('img');
                var currentDraggie = imageModal.data('draggie');

                if ($(this).hasClass('action-zoom-in')) {
                    imageModal.removeClass('image-is-fit-to-screen').addClass('image-is-zoomed');

                    var imgWidth = img.width();
                    var imgHeight = img.height();

                    var imgContainerOffsetLeft = imgWidth - mask.width();
                    var imgContainerOffsetTop = imgHeight - mask.height();
                    var imgContainerWidth = imgWidth + imgContainerOffsetLeft;
                    var imgContainerHeight = imgHeight + imgContainerOffsetTop;

                    // Set the width and height of the image's container so that the dimensions are equal to the image dimensions + view area dimensions to limit dragging
                    // Set image container top and left to center image at load.
                    img.parent().css({
                        left: -imgContainerOffsetLeft,
                        top: -imgContainerOffsetTop,
                        width: imgContainerWidth,
                        height: imgContainerHeight
                    });
                    img.css({ top: imgContainerOffsetTop / 2, left: imgContainerOffsetLeft / 2 });

                    currentDraggie.enable();
                } else if ($(this).hasClass('action-zoom-out')) {
                    imageModal.removeClass('image-is-zoomed').addClass('image-is-fit-to-screen');

                    currentDraggie.disable();
                }

                $('.wrapper-modal-image .image-content .image-controls .modal-ui-icon').toggleClass('is-disabled').attr('aria-disabled', $(this).hasClass('is-disabled'));
            }
        });
    };
}).call(window);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))

/***/ }),

/***/ "./common/static/xmodule/modules/js/005-26caba6f71877f63a7dd4f6796109bf6.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_1__factory, __WEBPACK_LOCAL_MODULE_1__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_2__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_3__;var __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_4__factory, __WEBPACK_LOCAL_MODULE_4__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_6__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_7__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*** IMPORTS FROM imports-loader ***/
(function () {

  /*!
   * Draggabilly PACKAGED v1.2.4
   * Make that shiz draggable
   * http://draggabilly.desandro.com
   * MIT license
   */

  /**
   * Bridget makes jQuery widgets
   * v1.1.0
   * MIT license
   */

  (function (window) {

    // -------------------------- utils -------------------------- //

    var slice = Array.prototype.slice;

    function noop() {}

    // -------------------------- definition -------------------------- //

    function defineBridget($) {

      // bail if no jQuery
      if (!$) {
        return;
      }

      // -------------------------- addOptionMethod -------------------------- //

      /**
       * adds option method -> $().plugin('option', {...})
       * @param {Function} PluginClass - constructor class
       */
      function addOptionMethod(PluginClass) {
        // don't overwrite original option method
        if (PluginClass.prototype.option) {
          return;
        }

        // option setter
        PluginClass.prototype.option = function (opts) {
          // bail out if not an object
          if (!$.isPlainObject(opts)) {
            return;
          }
          this.options = $.extend(true, this.options, opts);
        };
      }

      // -------------------------- plugin bridge -------------------------- //

      // helper function for logging errors
      // $.error breaks jQuery chaining
      var logError = typeof console === 'undefined' ? noop : function (message) {
        console.error(message);
      };

      /**
       * jQuery plugin bridge, access methods like $elem.plugin('method')
       * @param {String} namespace - plugin name
       * @param {Function} PluginClass - constructor class
       */
      function bridge(namespace, PluginClass) {
        // add to jQuery fn namespace
        $.fn[namespace] = function (options) {
          if (typeof options === 'string') {
            // call plugin method when first argument is a string
            // get arguments for method
            var args = slice.call(arguments, 1);

            for (var i = 0, len = this.length; i < len; i++) {
              var elem = this[i];
              var instance = $.data(elem, namespace);
              if (!instance) {
                logError("cannot call methods on " + namespace + " prior to initialization; " + "attempted to call '" + options + "'");
                continue;
              }
              if (!$.isFunction(instance[options]) || options.charAt(0) === '_') {
                logError("no such method '" + options + "' for " + namespace + " instance");
                continue;
              }

              // trigger method with arguments
              var returnValue = instance[options].apply(instance, args);

              // break look and return first value if provided
              if (returnValue !== undefined) {
                return returnValue;
              }
            }
            // return this if no return value
            return this;
          } else {
            return this.each(function () {
              var instance = $.data(this, namespace);
              if (instance) {
                // apply options & init
                instance.option(options);
                instance._init();
              } else {
                // initialize new instance
                instance = new PluginClass(this, options);
                $.data(this, namespace, instance);
              }
            });
          }
        };
      }

      // -------------------------- bridget -------------------------- //

      /**
       * converts a Prototypical class into a proper jQuery plugin
       *   the class must have a ._init method
       * @param {String} namespace - plugin name, used in $().pluginName
       * @param {Function} PluginClass - constructor class
       */
      $.bridget = function (namespace, PluginClass) {
        addOptionMethod(PluginClass);
        bridge(namespace, PluginClass);
      };

      return $.bridget;
    }

    // transport
    if (true) {
      // AMD
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineBridget),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
      defineBridget(require('jquery'));
    } else {
      // get jquery from browser global
      defineBridget(window.jQuery);
    }
  })(window);

  /*!
   * classie v1.0.1
   * class helper functions
   * from bonzo https://github.com/ded/bonzo
   * MIT license
   * 
   * classie.has( elem, 'my-class' ) -> true/false
   * classie.add( elem, 'my-new-class' )
   * classie.remove( elem, 'my-unwanted-class' )
   * classie.toggle( elem, 'my-class' )
   */

  /*jshint browser: true, strict: true, undef: true, unused: true */
  /*global define: false, module: false */

  (function (window) {

    // class helper functions from bonzo https://github.com/ded/bonzo

    function classReg(className) {
      return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
    }

    // classList support for class management
    // altho to be fair, the api sucks because it won't accept multiple classes at once
    var hasClass, addClass, removeClass;

    if ('classList' in document.documentElement) {
      hasClass = function hasClass(elem, c) {
        return elem.classList.contains(c);
      };
      addClass = function addClass(elem, c) {
        elem.classList.add(c);
      };
      removeClass = function removeClass(elem, c) {
        elem.classList.remove(c);
      };
    } else {
      hasClass = function hasClass(elem, c) {
        return classReg(c).test(elem.className);
      };
      addClass = function addClass(elem, c) {
        if (!hasClass(elem, c)) {
          elem.className = elem.className + ' ' + c;
        }
      };
      removeClass = function removeClass(elem, c) {
        elem.className = elem.className.replace(classReg(c), ' ');
      };
    }

    function toggleClass(elem, c) {
      var fn = hasClass(elem, c) ? removeClass : addClass;
      fn(elem, c);
    }

    var classie = {
      // full names
      hasClass: hasClass,
      addClass: addClass,
      removeClass: removeClass,
      toggleClass: toggleClass,
      // short names
      has: hasClass,
      add: addClass,
      remove: removeClass,
      toggle: toggleClass
    };

    // transport
    if (true) {
      // AMD
      !(__WEBPACK_LOCAL_MODULE_1__factory = (classie), (__WEBPACK_LOCAL_MODULE_1__module = { id: "classie/classie", exports: {}, loaded: false }), __WEBPACK_LOCAL_MODULE_1__ = (typeof __WEBPACK_LOCAL_MODULE_1__factory === 'function' ? (__WEBPACK_LOCAL_MODULE_1__factory.call(__WEBPACK_LOCAL_MODULE_1__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_1__module.exports, __WEBPACK_LOCAL_MODULE_1__module)) : __WEBPACK_LOCAL_MODULE_1__factory), (__WEBPACK_LOCAL_MODULE_1__module.loaded = true), __WEBPACK_LOCAL_MODULE_1__ === undefined && (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__module.exports));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
      // CommonJS
      module.exports = classie;
    } else {
      // browser global
      window.classie = classie;
    }
  })(window);

  /*!
   * getStyleProperty v1.0.4
   * original by kangax
   * http://perfectionkills.com/feature-testing-css-properties/
   * MIT license
   */

  /*jshint browser: true, strict: true, undef: true */
  /*global define: false, exports: false, module: false */

  (function (window) {

    var prefixes = 'Webkit Moz ms Ms O'.split(' ');
    var docElemStyle = document.documentElement.style;

    function getStyleProperty(propName) {
      if (!propName) {
        return;
      }

      // test standard property first
      if (typeof docElemStyle[propName] === 'string') {
        return propName;
      }

      // capitalize
      propName = propName.charAt(0).toUpperCase() + propName.slice(1);

      // test vendor specific properties
      var prefixed;
      for (var i = 0, len = prefixes.length; i < len; i++) {
        prefixed = prefixes[i] + propName;
        if (typeof docElemStyle[prefixed] === 'string') {
          return prefixed;
        }
      }
    }

    // transport
    if (true) {
      // AMD
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_2__ = (function () {
        return getStyleProperty;
      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
      // CommonJS for Component
      module.exports = getStyleProperty;
    } else {
      // browser global
      window.getStyleProperty = getStyleProperty;
    }
  })(window);

  /*!
   * getSize v1.2.2
   * measure size of elements
   * MIT license
   */

  /*jshint browser: true, strict: true, undef: true, unused: true */
  /*global define: false, exports: false, require: false, module: false, console: false */

  (function (window, undefined) {

    // -------------------------- helpers -------------------------- //

    // get a number from a string, not a percentage
    function getStyleSize(value) {
      var num = parseFloat(value);
      // not a percent like '100%', and a number
      var isValid = value.indexOf('%') === -1 && !isNaN(num);
      return isValid && num;
    }

    function noop() {}

    var logError = typeof console === 'undefined' ? noop : function (message) {
      console.error(message);
    };

    // -------------------------- measurements -------------------------- //

    var measurements = ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];

    function getZeroSize() {
      var size = {
        width: 0,
        height: 0,
        innerWidth: 0,
        innerHeight: 0,
        outerWidth: 0,
        outerHeight: 0
      };
      for (var i = 0, len = measurements.length; i < len; i++) {
        var measurement = measurements[i];
        size[measurement] = 0;
      }
      return size;
    }

    function defineGetSize(getStyleProperty) {

      // -------------------------- setup -------------------------- //

      var isSetup = false;

      var getStyle, boxSizingProp, isBoxSizeOuter;

      /**
       * setup vars and functions
       * do it on initial getSize(), rather than on script load
       * For Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=548397
       */
      function setup() {
        // setup once
        if (isSetup) {
          return;
        }
        isSetup = true;

        var getComputedStyle = window.getComputedStyle;
        getStyle = function () {
          var getStyleFn = getComputedStyle ? function (elem) {
            return getComputedStyle(elem, null);
          } : function (elem) {
            return elem.currentStyle;
          };

          return function getStyle(elem) {
            var style = getStyleFn(elem);
            if (!style) {
              logError('Style returned ' + style + '. Are you running this code in a hidden iframe on Firefox? ' + 'See http://bit.ly/getsizebug1');
            }
            return style;
          };
        }();

        // -------------------------- box sizing -------------------------- //

        boxSizingProp = getStyleProperty('boxSizing');

        /**
         * WebKit measures the outer-width on style.width on border-box elems
         * IE & Firefox measures the inner-width
         */
        if (boxSizingProp) {
          var div = document.createElement('div');
          div.style.width = '200px';
          div.style.padding = '1px 2px 3px 4px';
          div.style.borderStyle = 'solid';
          div.style.borderWidth = '1px 2px 3px 4px';
          div.style[boxSizingProp] = 'border-box';

          var body = document.body || document.documentElement;
          body.appendChild(div);
          var style = getStyle(div);

          isBoxSizeOuter = getStyleSize(style.width) === 200;
          body.removeChild(div);
        }
      }

      // -------------------------- getSize -------------------------- //

      function getSize(elem) {
        setup();

        // use querySeletor if elem is string
        if (typeof elem === 'string') {
          elem = document.querySelector(elem);
        }

        // do not proceed on non-objects
        if (!elem || (typeof elem === 'undefined' ? 'undefined' : _typeof(elem)) !== 'object' || !elem.nodeType) {
          return;
        }

        var style = getStyle(elem);

        // if hidden, everything is 0
        if (style.display === 'none') {
          return getZeroSize();
        }

        var size = {};
        size.width = elem.offsetWidth;
        size.height = elem.offsetHeight;

        var isBorderBox = size.isBorderBox = !!(boxSizingProp && style[boxSizingProp] && style[boxSizingProp] === 'border-box');

        // get all measurements
        for (var i = 0, len = measurements.length; i < len; i++) {
          var measurement = measurements[i];
          var value = style[measurement];
          value = mungeNonPixel(elem, value);
          var num = parseFloat(value);
          // any 'auto', 'medium' value will be 0
          size[measurement] = !isNaN(num) ? num : 0;
        }

        var paddingWidth = size.paddingLeft + size.paddingRight;
        var paddingHeight = size.paddingTop + size.paddingBottom;
        var marginWidth = size.marginLeft + size.marginRight;
        var marginHeight = size.marginTop + size.marginBottom;
        var borderWidth = size.borderLeftWidth + size.borderRightWidth;
        var borderHeight = size.borderTopWidth + size.borderBottomWidth;

        var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;

        // overwrite width and height if we can get it from style
        var styleWidth = getStyleSize(style.width);
        if (styleWidth !== false) {
          size.width = styleWidth + (
          // add padding and border unless it's already including it
          isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);
        }

        var styleHeight = getStyleSize(style.height);
        if (styleHeight !== false) {
          size.height = styleHeight + (
          // add padding and border unless it's already including it
          isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);
        }

        size.innerWidth = size.width - (paddingWidth + borderWidth);
        size.innerHeight = size.height - (paddingHeight + borderHeight);

        size.outerWidth = size.width + marginWidth;
        size.outerHeight = size.height + marginHeight;

        return size;
      }

      // IE8 returns percent values, not pixels
      // taken from jQuery's curCSS
      function mungeNonPixel(elem, value) {
        // IE8 and has percent value
        if (window.getComputedStyle || value.indexOf('%') === -1) {
          return value;
        }
        var style = elem.style;
        // Remember the original values
        var left = style.left;
        var rs = elem.runtimeStyle;
        var rsLeft = rs && rs.left;

        // Put in the new values to get a computed value out
        if (rsLeft) {
          rs.left = elem.currentStyle.left;
        }
        style.left = value;
        value = style.pixelLeft;

        // Revert the changed values
        style.left = left;
        if (rsLeft) {
          rs.left = rsLeft;
        }

        return value;
      }

      return getSize;
    }

    // transport
    if (true) {
      // AMD for RequireJS
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_2__], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineGetSize),
				__WEBPACK_LOCAL_MODULE_3__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
      // CommonJS for Component
      module.exports = defineGetSize(require('desandro-get-style-property'));
    } else {
      // browser global
      window.getSize = defineGetSize(window.getStyleProperty);
    }
  })(window);

  /*!
   * eventie v1.0.6
   * event binding helper
   *   eventie.bind( elem, 'click', myFn )
   *   eventie.unbind( elem, 'click', myFn )
   * MIT license
   */

  /*jshint browser: true, undef: true, unused: true */
  /*global define: false, module: false */

  (function (window) {

    var docElem = document.documentElement;

    var bind = function bind() {};

    function getIEEvent(obj) {
      var event = window.event;
      // add event.target
      event.target = event.target || event.srcElement || obj;
      return event;
    }

    if (docElem.addEventListener) {
      bind = function bind(obj, type, fn) {
        obj.addEventListener(type, fn, false);
      };
    } else if (docElem.attachEvent) {
      bind = function bind(obj, type, fn) {
        obj[type + fn] = fn.handleEvent ? function () {
          var event = getIEEvent(obj);
          fn.handleEvent.call(fn, event);
        } : function () {
          var event = getIEEvent(obj);
          fn.call(obj, event);
        };
        obj.attachEvent("on" + type, obj[type + fn]);
      };
    }

    var unbind = function unbind() {};

    if (docElem.removeEventListener) {
      unbind = function unbind(obj, type, fn) {
        obj.removeEventListener(type, fn, false);
      };
    } else if (docElem.detachEvent) {
      unbind = function unbind(obj, type, fn) {
        obj.detachEvent("on" + type, obj[type + fn]);
        try {
          delete obj[type + fn];
        } catch (err) {
          // can't delete window object properties
          obj[type + fn] = undefined;
        }
      };
    }

    var eventie = {
      bind: bind,
      unbind: unbind
    };

    // ----- module definition ----- //

    if (true) {
      // AMD
      !(__WEBPACK_LOCAL_MODULE_4__factory = (eventie), (__WEBPACK_LOCAL_MODULE_4__module = { id: "eventie/eventie", exports: {}, loaded: false }), __WEBPACK_LOCAL_MODULE_4__ = (typeof __WEBPACK_LOCAL_MODULE_4__factory === 'function' ? (__WEBPACK_LOCAL_MODULE_4__factory.call(__WEBPACK_LOCAL_MODULE_4__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_4__module.exports, __WEBPACK_LOCAL_MODULE_4__module)) : __WEBPACK_LOCAL_MODULE_4__factory), (__WEBPACK_LOCAL_MODULE_4__module.loaded = true), __WEBPACK_LOCAL_MODULE_4__ === undefined && (__WEBPACK_LOCAL_MODULE_4__ = __WEBPACK_LOCAL_MODULE_4__module.exports));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
      // CommonJS
      module.exports = eventie;
    } else {
      // browser global
      window.eventie = eventie;
    }
  })(window);

  /*!
   * EventEmitter v4.2.11 - git.io/ee
   * Unlicense - http://unlicense.org/
   * Oliver Caldwell - http://oli.me.uk/
   * @preserve
   */

  ;(function () {

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */
    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var exports = this;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
      var i = listeners.length;
      while (i--) {
        if (listeners[i].listener === listener) {
          return i;
        }
      }

      return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
      return function aliasClosure() {
        return this[name].apply(this, arguments);
      };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
      var events = this._getEvents();
      var response;
      var key;

      // Return a concatenated array of all matching events if
      // the selector is a regular expression.
      if (evt instanceof RegExp) {
        response = {};
        for (key in events) {
          if (events.hasOwnProperty(key) && evt.test(key)) {
            response[key] = events[key];
          }
        }
      } else {
        response = events[evt] || (events[evt] = []);
      }

      return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
      var flatListeners = [];
      var i;

      for (i = 0; i < listeners.length; i += 1) {
        flatListeners.push(listeners[i].listener);
      }

      return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
      var listeners = this.getListeners(evt);
      var response;

      if (listeners instanceof Array) {
        response = {};
        response[evt] = listeners;
      }

      return response || listeners;
    };

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
      var listeners = this.getListenersAsObject(evt);
      var listenerIsWrapped = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';
      var key;

      for (key in listeners) {
        if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
          listeners[key].push(listenerIsWrapped ? listener : {
            listener: listener,
            once: false
          });
        }
      }

      return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
      return this.addListener(evt, {
        listener: listener,
        once: true
      });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
      this.getListeners(evt);
      return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
      for (var i = 0; i < evts.length; i += 1) {
        this.defineEvent(evts[i]);
      }
      return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
      var listeners = this.getListenersAsObject(evt);
      var index;
      var key;

      for (key in listeners) {
        if (listeners.hasOwnProperty(key)) {
          index = indexOfListener(listeners[key], listener);

          if (index !== -1) {
            listeners[key].splice(index, 1);
          }
        }
      }

      return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
      // Pass through to manipulateListeners
      return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
      // Pass through to manipulateListeners
      return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
      var i;
      var value;
      var single = remove ? this.removeListener : this.addListener;
      var multiple = remove ? this.removeListeners : this.addListeners;

      // If evt is an object then pass each of its properties to this method
      if ((typeof evt === 'undefined' ? 'undefined' : _typeof(evt)) === 'object' && !(evt instanceof RegExp)) {
        for (i in evt) {
          if (evt.hasOwnProperty(i) && (value = evt[i])) {
            // Pass the single listener straight through to the singular method
            if (typeof value === 'function') {
              single.call(this, i, value);
            } else {
              // Otherwise pass back to the multiple function
              multiple.call(this, i, value);
            }
          }
        }
      } else {
        // So evt must be a string
        // And listeners must be an array of listeners
        // Loop over it and pass each one to the multiple method
        i = listeners.length;
        while (i--) {
          single.call(this, evt, listeners[i]);
        }
      }

      return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
      var type = typeof evt === 'undefined' ? 'undefined' : _typeof(evt);
      var events = this._getEvents();
      var key;

      // Remove different things depending on the state of evt
      if (type === 'string') {
        // Remove all listeners for the specified event
        delete events[evt];
      } else if (evt instanceof RegExp) {
        // Remove all events matching the regex.
        for (key in events) {
          if (events.hasOwnProperty(key) && evt.test(key)) {
            delete events[key];
          }
        }
      } else {
        // Remove all listeners in all events
        delete this._events;
      }

      return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
      var listeners = this.getListenersAsObject(evt);
      var listener;
      var i;
      var key;
      var response;

      for (key in listeners) {
        if (listeners.hasOwnProperty(key)) {
          i = listeners[key].length;

          while (i--) {
            // If the listener returns true then it shall be removed from the event
            // The function is executed either with a basic call or an apply if there is an args array
            listener = listeners[key][i];

            if (listener.once === true) {
              this.removeListener(evt, listener.listener);
            }

            response = listener.listener.apply(this, args || []);

            if (response === this._getOnceReturnValue()) {
              this.removeListener(evt, listener.listener);
            }
          }
        }
      }

      return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
      var args = Array.prototype.slice.call(arguments, 1);
      return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
      this._onceReturnValue = value;
      return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
      if (this.hasOwnProperty('_onceReturnValue')) {
        return this._onceReturnValue;
      } else {
        return true;
      }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
      return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
      exports.EventEmitter = originalGlobalValue;
      return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (true) {
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_5__ = (function () {
        return EventEmitter;
      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
    } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
      module.exports = EventEmitter;
    } else {
      exports.EventEmitter = EventEmitter;
    }
  }).call(this);

  /*!
   * Unipointer v1.1.0
   * base class for doing one thing with pointer event
   * MIT license
   */

  /*jshint browser: true, undef: true, unused: true, strict: true */
  /*global define: false, module: false, require: false */

  (function (window, factory) {

    // universal module definition

    if (true) {
      // AMD
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_5__, __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_LOCAL_MODULE_6__ = (function (EventEmitter, eventie) {
        return factory(window, EventEmitter, eventie);
      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == 'object') {
      // CommonJS
      module.exports = factory(window, require('wolfy87-eventemitter'), require('eventie'));
    } else {
      // browser global
      window.Unipointer = factory(window, window.EventEmitter, window.eventie);
    }
  })(window, function factory(window, EventEmitter, eventie) {

    function noop() {}

    function Unipointer() {}

    // inherit EventEmitter
    Unipointer.prototype = new EventEmitter();

    Unipointer.prototype.bindStartEvent = function (elem) {
      this._bindStartEvent(elem, true);
    };

    Unipointer.prototype.unbindStartEvent = function (elem) {
      this._bindStartEvent(elem, false);
    };

    /**
     * works as unbinder, as you can ._bindStart( false ) to unbind
     * @param {Boolean} isBind - will unbind if falsey
     */
    Unipointer.prototype._bindStartEvent = function (elem, isBind) {
      // munge isBind, default to true
      isBind = isBind === undefined ? true : !!isBind;
      var bindMethod = isBind ? 'bind' : 'unbind';

      if (window.navigator.pointerEnabled) {
        // W3C Pointer Events, IE11. See https://coderwall.com/p/mfreca
        eventie[bindMethod](elem, 'pointerdown', this);
      } else if (window.navigator.msPointerEnabled) {
        // IE10 Pointer Events
        eventie[bindMethod](elem, 'MSPointerDown', this);
      } else {
        // listen for both, for devices like Chrome Pixel
        eventie[bindMethod](elem, 'mousedown', this);
        eventie[bindMethod](elem, 'touchstart', this);
      }
    };

    // trigger handler methods for events
    Unipointer.prototype.handleEvent = function (event) {
      var method = 'on' + event.type;
      if (this[method]) {
        this[method](event);
      }
    };

    // returns the touch that we're keeping track of
    Unipointer.prototype.getTouch = function (touches) {
      for (var i = 0, len = touches.length; i < len; i++) {
        var touch = touches[i];
        if (touch.identifier == this.pointerIdentifier) {
          return touch;
        }
      }
    };

    // ----- start event ----- //

    Unipointer.prototype.onmousedown = function (event) {
      // dismiss clicks from right or middle buttons
      var button = event.button;
      if (button && button !== 0 && button !== 1) {
        return;
      }
      this._pointerDown(event, event);
    };

    Unipointer.prototype.ontouchstart = function (event) {
      this._pointerDown(event, event.changedTouches[0]);
    };

    Unipointer.prototype.onMSPointerDown = Unipointer.prototype.onpointerdown = function (event) {
      this._pointerDown(event, event);
    };

    /**
     * pointer start
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Unipointer.prototype._pointerDown = function (event, pointer) {
      // dismiss other pointers
      if (this.isPointerDown) {
        return;
      }

      this.isPointerDown = true;
      // save pointer identifier to match up touch events
      this.pointerIdentifier = pointer.pointerId !== undefined ?
      // pointerId for pointer events, touch.indentifier for touch events
      pointer.pointerId : pointer.identifier;

      this.pointerDown(event, pointer);
    };

    Unipointer.prototype.pointerDown = function (event, pointer) {
      this._bindPostStartEvents(event);
      this.emitEvent('pointerDown', [event, pointer]);
    };

    // hash of events to be bound after start event
    var postStartEvents = {
      mousedown: ['mousemove', 'mouseup'],
      touchstart: ['touchmove', 'touchend', 'touchcancel'],
      pointerdown: ['pointermove', 'pointerup', 'pointercancel'],
      MSPointerDown: ['MSPointerMove', 'MSPointerUp', 'MSPointerCancel']
    };

    Unipointer.prototype._bindPostStartEvents = function (event) {
      if (!event) {
        return;
      }
      // get proper events to match start event
      var events = postStartEvents[event.type];
      // IE8 needs to be bound to document
      var node = event.preventDefault ? window : document;
      // bind events to node
      for (var i = 0, len = events.length; i < len; i++) {
        var evnt = events[i];
        eventie.bind(node, evnt, this);
      }
      // save these arguments
      this._boundPointerEvents = {
        events: events,
        node: node
      };
    };

    Unipointer.prototype._unbindPostStartEvents = function () {
      var args = this._boundPointerEvents;
      // IE8 can trigger dragEnd twice, check for _boundEvents
      if (!args || !args.events) {
        return;
      }

      for (var i = 0, len = args.events.length; i < len; i++) {
        var event = args.events[i];
        eventie.unbind(args.node, event, this);
      }
      delete this._boundPointerEvents;
    };

    // ----- move event ----- //

    Unipointer.prototype.onmousemove = function (event) {
      this._pointerMove(event, event);
    };

    Unipointer.prototype.onMSPointerMove = Unipointer.prototype.onpointermove = function (event) {
      if (event.pointerId == this.pointerIdentifier) {
        this._pointerMove(event, event);
      }
    };

    Unipointer.prototype.ontouchmove = function (event) {
      var touch = this.getTouch(event.changedTouches);
      if (touch) {
        this._pointerMove(event, touch);
      }
    };

    /**
     * pointer move
     * @param {Event} event
     * @param {Event or Touch} pointer
     * @private
     */
    Unipointer.prototype._pointerMove = function (event, pointer) {
      this.pointerMove(event, pointer);
    };

    // public
    Unipointer.prototype.pointerMove = function (event, pointer) {
      this.emitEvent('pointerMove', [event, pointer]);
    };

    // ----- end event ----- //


    Unipointer.prototype.onmouseup = function (event) {
      this._pointerUp(event, event);
    };

    Unipointer.prototype.onMSPointerUp = Unipointer.prototype.onpointerup = function (event) {
      if (event.pointerId == this.pointerIdentifier) {
        this._pointerUp(event, event);
      }
    };

    Unipointer.prototype.ontouchend = function (event) {
      var touch = this.getTouch(event.changedTouches);
      if (touch) {
        this._pointerUp(event, touch);
      }
    };

    /**
     * pointer up
     * @param {Event} event
     * @param {Event or Touch} pointer
     * @private
     */
    Unipointer.prototype._pointerUp = function (event, pointer) {
      this._pointerDone();
      this.pointerUp(event, pointer);
    };

    // public
    Unipointer.prototype.pointerUp = function (event, pointer) {
      this.emitEvent('pointerUp', [event, pointer]);
    };

    // ----- pointer done ----- //

    // triggered on pointer up & pointer cancel
    Unipointer.prototype._pointerDone = function () {
      // reset properties
      this.isPointerDown = false;
      delete this.pointerIdentifier;
      // remove events
      this._unbindPostStartEvents();
      this.pointerDone();
    };

    Unipointer.prototype.pointerDone = noop;

    // ----- pointer cancel ----- //

    Unipointer.prototype.onMSPointerCancel = Unipointer.prototype.onpointercancel = function (event) {
      if (event.pointerId == this.pointerIdentifier) {
        this._pointerCancel(event, event);
      }
    };

    Unipointer.prototype.ontouchcancel = function (event) {
      var touch = this.getTouch(event.changedTouches);
      if (touch) {
        this._pointerCancel(event, touch);
      }
    };

    /**
     * pointer cancel
     * @param {Event} event
     * @param {Event or Touch} pointer
     * @private
     */
    Unipointer.prototype._pointerCancel = function (event, pointer) {
      this._pointerDone();
      this.pointerCancel(event, pointer);
    };

    // public
    Unipointer.prototype.pointerCancel = function (event, pointer) {
      this.emitEvent('pointerCancel', [event, pointer]);
    };

    // -----  ----- //

    // utility function for getting x/y cooridinates from event, because IE8
    Unipointer.getPointerPoint = function (pointer) {
      return {
        x: pointer.pageX !== undefined ? pointer.pageX : pointer.clientX,
        y: pointer.pageY !== undefined ? pointer.pageY : pointer.clientY
      };
    };

    // -----  ----- //

    return Unipointer;
  });

  /*!
   * Unidragger v1.1.0
   * Draggable base class
   * MIT license
   */

  /*jshint browser: true, unused: true, undef: true, strict: true */

  (function (window, factory) {
    /*global define: false, module: false, require: false */

    // universal module definition

    if (true) {
      // AMD
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_6__], __WEBPACK_LOCAL_MODULE_7__ = (function (eventie, Unipointer) {
        return factory(window, eventie, Unipointer);
      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == 'object') {
      // CommonJS
      module.exports = factory(window, require('eventie'), require('unipointer'));
    } else {
      // browser global
      window.Unidragger = factory(window, window.eventie, window.Unipointer);
    }
  })(window, function factory(window, eventie, Unipointer) {

    // -----  ----- //

    function noop() {}

    // handle IE8 prevent default
    function preventDefaultEvent(event) {
      if (event.preventDefault) {
        event.preventDefault();
      } else {
        event.returnValue = false;
      }
    }

    function getParentLink(elem) {
      while (elem != document.body) {
        elem = elem.parentNode;
        if (elem.nodeName == 'A') {
          return elem;
        }
      }
    }

    // -------------------------- Unidragger -------------------------- //

    function Unidragger() {}

    // inherit Unipointer & EventEmitter
    Unidragger.prototype = new Unipointer();

    // ----- bind start ----- //

    Unidragger.prototype.bindHandles = function () {
      this._bindHandles(true);
    };

    Unidragger.prototype.unbindHandles = function () {
      this._bindHandles(false);
    };

    var navigator = window.navigator;
    /**
     * works as unbinder, as you can .bindHandles( false ) to unbind
     * @param {Boolean} isBind - will unbind if falsey
     */
    Unidragger.prototype._bindHandles = function (isBind) {
      // munge isBind, default to true
      isBind = isBind === undefined ? true : !!isBind;
      // extra bind logic
      var binderExtra;
      if (navigator.pointerEnabled) {
        binderExtra = function binderExtra(handle) {
          // disable scrolling on the element
          handle.style.touchAction = isBind ? 'none' : '';
        };
      } else if (navigator.msPointerEnabled) {
        binderExtra = function binderExtra(handle) {
          // disable scrolling on the element
          handle.style.msTouchAction = isBind ? 'none' : '';
        };
      } else {
        binderExtra = function binderExtra() {
          // TODO re-enable img.ondragstart when unbinding
          if (isBind) {
            disableImgOndragstart(handle);
          }
        };
      }
      // bind each handle
      var bindMethod = isBind ? 'bind' : 'unbind';
      for (var i = 0, len = this.handles.length; i < len; i++) {
        var handle = this.handles[i];
        this._bindStartEvent(handle, isBind);
        binderExtra(handle);
        eventie[bindMethod](handle, 'click', this);
      }
    };

    // remove default dragging interaction on all images in IE8
    // IE8 does its own drag thing on images, which messes stuff up

    function noDragStart() {
      return false;
    }

    // TODO replace this with a IE8 test
    var isIE8 = 'attachEvent' in document.documentElement;

    // IE8 only
    var disableImgOndragstart = !isIE8 ? noop : function (handle) {

      if (handle.nodeName == 'IMG') {
        handle.ondragstart = noDragStart;
      }

      var images = handle.querySelectorAll('img');
      for (var i = 0, len = images.length; i < len; i++) {
        var img = images[i];
        img.ondragstart = noDragStart;
      }
    };

    // ----- start event ----- //

    var allowTouchstartNodes = Unidragger.allowTouchstartNodes = {
      INPUT: true,
      A: true,
      BUTTON: true,
      SELECT: true
    };

    /**
     * pointer start
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Unidragger.prototype.pointerDown = function (event, pointer) {
      this._dragPointerDown(event, pointer);
      // kludge to blur focused inputs in dragger
      var focused = document.activeElement;
      if (focused && focused.blur) {
        focused.blur();
      }
      // bind move and end events
      this._bindPostStartEvents(event);
      this.emitEvent('pointerDown', [event, pointer]);
    };

    // base pointer down logic
    Unidragger.prototype._dragPointerDown = function (event, pointer) {
      // track to see when dragging starts
      this.pointerDownPoint = Unipointer.getPointerPoint(pointer);

      var targetNodeName = event.target.nodeName;
      // HACK iOS, allow clicks on buttons, inputs, and links, or children of links
      var isTouchstartNode = event.type == 'touchstart' && (allowTouchstartNodes[targetNodeName] || getParentLink(event.target));
      // do not prevent default on touchstart nodes or <select>
      if (!isTouchstartNode && targetNodeName != 'SELECT') {
        preventDefaultEvent(event);
      }
    };

    // ----- move event ----- //

    /**
     * drag move
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Unidragger.prototype.pointerMove = function (event, pointer) {
      var moveVector = this._dragPointerMove(event, pointer);
      this.emitEvent('pointerMove', [event, pointer, moveVector]);
      this._dragMove(event, pointer, moveVector);
    };

    // base pointer move logic
    Unidragger.prototype._dragPointerMove = function (event, pointer) {
      var movePoint = Unipointer.getPointerPoint(pointer);
      var moveVector = {
        x: movePoint.x - this.pointerDownPoint.x,
        y: movePoint.y - this.pointerDownPoint.y
      };
      // start drag if pointer has moved far enough to start drag
      if (!this.isDragging && this.hasDragStarted(moveVector)) {
        this._dragStart(event, pointer);
      }
      return moveVector;
    };

    // condition if pointer has moved far enough to start drag
    Unidragger.prototype.hasDragStarted = function (moveVector) {
      return Math.abs(moveVector.x) > 3 || Math.abs(moveVector.y) > 3;
    };

    // ----- end event ----- //

    /**
     * pointer up
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Unidragger.prototype.pointerUp = function (event, pointer) {
      this.emitEvent('pointerUp', [event, pointer]);
      this._dragPointerUp(event, pointer);
    };

    Unidragger.prototype._dragPointerUp = function (event, pointer) {
      if (this.isDragging) {
        this._dragEnd(event, pointer);
      } else {
        // pointer didn't move enough for drag to start
        this._staticClick(event, pointer);
      }
    };

    // -------------------------- drag -------------------------- //

    // dragStart
    Unidragger.prototype._dragStart = function (event, pointer) {
      this.isDragging = true;
      this.dragStartPoint = Unidragger.getPointerPoint(pointer);
      // prevent clicks
      this.isPreventingClicks = true;

      this.dragStart(event, pointer);
    };

    Unidragger.prototype.dragStart = function (event, pointer) {
      this.emitEvent('dragStart', [event, pointer]);
    };

    // dragMove
    Unidragger.prototype._dragMove = function (event, pointer, moveVector) {
      // do not drag if not dragging yet
      if (!this.isDragging) {
        return;
      }

      this.dragMove(event, pointer, moveVector);
    };

    Unidragger.prototype.dragMove = function (event, pointer, moveVector) {
      this.emitEvent('dragMove', [event, pointer, moveVector]);
    };

    // dragEnd
    Unidragger.prototype._dragEnd = function (event, pointer) {
      // set flags
      this.isDragging = false;
      // re-enable clicking async
      var _this = this;
      setTimeout(function () {
        delete _this.isPreventingClicks;
      });

      this.dragEnd(event, pointer);
    };

    Unidragger.prototype.dragEnd = function (event, pointer) {
      this.emitEvent('dragEnd', [event, pointer]);
    };

    // ----- onclick ----- //

    // handle all clicks and prevent clicks when dragging
    Unidragger.prototype.onclick = function (event) {
      if (this.isPreventingClicks) {
        preventDefaultEvent(event);
      }
    };

    // ----- staticClick ----- //

    // triggered after pointer down & up with no/tiny movement
    Unidragger.prototype._staticClick = function (event, pointer) {
      // allow click in text input
      if (event.target.nodeName == 'INPUT' && event.target.type == 'text') {
        event.target.focus();
      }
      this.staticClick(event, pointer);
    };

    Unidragger.prototype.staticClick = function (event, pointer) {
      this.emitEvent('staticClick', [event, pointer]);
    };

    // -----  ----- //

    Unidragger.getPointerPoint = function (pointer) {
      return {
        x: pointer.pageX !== undefined ? pointer.pageX : pointer.clientX,
        y: pointer.pageY !== undefined ? pointer.pageY : pointer.clientY
      };
    };

    // -----  ----- //

    Unidragger.getPointerPoint = Unipointer.getPointerPoint;

    return Unidragger;
  });

  /*!
   * Draggabilly v1.2.4
   * Make that shiz draggable
   * http://draggabilly.desandro.com
   * MIT license
   */

  (function (window, factory) {

    if (true) {
      // AMD
      // Note: fixed by andy-armstrong to include a name for the definition
      // so that this works when optimized using r.js. This is only an issue
      // in Studio, as the LMS uses a namespaced version of RequireJS so
      // this clause isn't reached.
      // See http://requirejs.org/docs/errors.html#mismatch
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_7__], __WEBPACK_AMD_DEFINE_RESULT__ = function (classie, getStyleProperty, getSize, Unidragger) {
        return factory(window, classie, getStyleProperty, getSize, Unidragger);
      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == 'object') {
      // CommonJS
      module.exports = factory(window, require('desandro-classie'), require('desandro-get-style-property'), require('get-size'), require('unidragger'));
    } else {
      // browser global
      window.Draggabilly = factory(window, window.classie, window.getStyleProperty, window.getSize, window.Unidragger);
    }
  })(window, function factory(window, classie, getStyleProperty, getSize, Unidragger) {

    // vars
    var document = window.document;

    function noop() {}

    // -------------------------- helpers -------------------------- //

    // extend objects
    function extend(a, b) {
      for (var prop in b) {
        a[prop] = b[prop];
      }
      return a;
    }

    // ----- get style ----- //

    var defView = document.defaultView;

    var getStyle = defView && defView.getComputedStyle ? function (elem) {
      return defView.getComputedStyle(elem, null);
    } : function (elem) {
      return elem.currentStyle;
    };

    // http://stackoverflow.com/a/384380/182183
    var isElement = (typeof HTMLElement === 'undefined' ? 'undefined' : _typeof(HTMLElement)) == 'object' ? function isElementDOM2(obj) {
      return obj instanceof HTMLElement;
    } : function isElementQuirky(obj) {
      return obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' && obj.nodeType == 1 && typeof obj.nodeName == 'string';
    };

    // -------------------------- requestAnimationFrame -------------------------- //

    // https://gist.github.com/1866474

    var lastTime = 0;
    var prefixes = 'webkit moz ms o'.split(' ');
    // get unprefixed rAF and cAF, if present
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame;
    // loop through vendor prefixes and get prefixed rAF and cAF
    var prefix;
    for (var i = 0; i < prefixes.length; i++) {
      if (requestAnimationFrame && cancelAnimationFrame) {
        break;
      }
      prefix = prefixes[i];
      requestAnimationFrame = requestAnimationFrame || window[prefix + 'RequestAnimationFrame'];
      cancelAnimationFrame = cancelAnimationFrame || window[prefix + 'CancelAnimationFrame'] || window[prefix + 'CancelRequestAnimationFrame'];
    }

    // fallback to setTimeout and clearTimeout if either request/cancel is not supported
    if (!requestAnimationFrame || !cancelAnimationFrame) {
      requestAnimationFrame = function requestAnimationFrame(callback) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        var id = window.setTimeout(function () {
          callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };

      cancelAnimationFrame = function cancelAnimationFrame(id) {
        window.clearTimeout(id);
      };
    }

    // -------------------------- support -------------------------- //

    var transformProperty = getStyleProperty('transform');
    // TODO fix quick & dirty check for 3D support
    var is3d = !!getStyleProperty('perspective');

    var jQuery = window.jQuery;

    // --------------------------  -------------------------- //

    function Draggabilly(element, options) {
      // querySelector if string
      this.element = typeof element == 'string' ? document.querySelector(element) : element;

      if (jQuery) {
        this.$element = jQuery(this.element);
      }

      // options
      this.options = extend({}, this.constructor.defaults);
      this.option(options);

      this._create();
    }

    // inherit Unidragger methods
    extend(Draggabilly.prototype, Unidragger.prototype);

    Draggabilly.defaults = {};

    /**
     * set options
     * @param {Object} opts
     */
    Draggabilly.prototype.option = function (opts) {
      extend(this.options, opts);
    };

    Draggabilly.prototype._create = function () {

      // properties
      this.position = {};
      this._getPosition();

      this.startPoint = { x: 0, y: 0 };
      this.dragPoint = { x: 0, y: 0 };

      this.startPosition = extend({}, this.position);

      // set relative positioning
      var style = getStyle(this.element);
      if (style.position != 'relative' && style.position != 'absolute') {
        this.element.style.position = 'relative';
      }

      this.enable();
      this.setHandles();
    };

    /**
     * set this.handles and bind start events to 'em
     */
    Draggabilly.prototype.setHandles = function () {
      this.handles = this.options.handle ? this.element.querySelectorAll(this.options.handle) : [this.element];

      this.bindHandles();
    };

    /**
     * emits events via eventEmitter and jQuery events
     * @param {String} type - name of event
     * @param {Event} event - original event
     * @param {Array} args - extra arguments
     */
    Draggabilly.prototype.dispatchEvent = function (type, event, args) {
      var emitArgs = [event].concat(args);
      this.emitEvent(type, emitArgs);
      var jQuery = window.jQuery;
      // trigger jQuery event
      if (jQuery && this.$element) {
        if (event) {
          // create jQuery event
          var $event = jQuery.Event(event);
          $event.type = type;
          this.$element.trigger($event, args);
        } else {
          // just trigger with type if no event available
          this.$element.trigger(type, args);
        }
      }
    };

    // -------------------------- position -------------------------- //

    // get left/top position from style
    Draggabilly.prototype._getPosition = function () {
      // properties
      var style = getStyle(this.element);

      var x = parseInt(style.left, 10);
      var y = parseInt(style.top, 10);

      // clean up 'auto' or other non-integer values
      this.position.x = isNaN(x) ? 0 : x;
      this.position.y = isNaN(y) ? 0 : y;

      this._addTransformPosition(style);
    };

    // add transform: translate( x, y ) to position
    Draggabilly.prototype._addTransformPosition = function (style) {
      if (!transformProperty) {
        return;
      }
      var transform = style[transformProperty];
      // bail out if value is 'none'
      if (transform.indexOf('matrix') !== 0) {
        return;
      }
      // split matrix(1, 0, 0, 1, x, y)
      var matrixValues = transform.split(',');
      // translate X value is in 12th or 4th position
      var xIndex = transform.indexOf('matrix3d') === 0 ? 12 : 4;
      var translateX = parseInt(matrixValues[xIndex], 10);
      // translate Y value is in 13th or 5th position
      var translateY = parseInt(matrixValues[xIndex + 1], 10);
      this.position.x += translateX;
      this.position.y += translateY;
    };

    // -------------------------- events -------------------------- //

    /**
     * pointer start
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Draggabilly.prototype.pointerDown = function (event, pointer) {
      this._dragPointerDown(event, pointer);
      // kludge to blur focused inputs in dragger
      var focused = document.activeElement;
      if (focused && focused.blur) {
        focused.blur();
      }
      // bind move and end events
      this._bindPostStartEvents(event);
      classie.add(this.element, 'is-pointer-down');
      this.dispatchEvent('pointerDown', event, [pointer]);
    };

    /**
     * drag move
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Draggabilly.prototype.pointerMove = function (event, pointer) {
      var moveVector = this._dragPointerMove(event, pointer);
      this.dispatchEvent('pointerMove', event, [pointer, moveVector]);
      this._dragMove(event, pointer, moveVector);
    };

    /**
     * drag start
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Draggabilly.prototype.dragStart = function (event, pointer) {
      if (!this.isEnabled) {
        return;
      }
      this._getPosition();
      this.measureContainment();
      // position _when_ drag began
      this.startPosition.x = this.position.x;
      this.startPosition.y = this.position.y;
      // reset left/top style
      this.setLeftTop();

      this.dragPoint.x = 0;
      this.dragPoint.y = 0;

      // reset isDragging flag
      this.isDragging = true;
      classie.add(this.element, 'is-dragging');
      this.dispatchEvent('dragStart', event, [pointer]);
      // start animation
      this.animate();
    };

    Draggabilly.prototype.measureContainment = function () {
      var containment = this.options.containment;
      if (!containment) {
        return;
      }

      this.size = getSize(this.element);
      var elemRect = this.element.getBoundingClientRect();

      // use element if element
      var container = isElement(containment) ? containment :
      // fallback to querySelector if string
      typeof containment == 'string' ? document.querySelector(containment) :
      // otherwise just `true`, use the parent
      this.element.parentNode;

      this.containerSize = getSize(container);
      var containerRect = container.getBoundingClientRect();

      this.relativeStartPosition = {
        x: elemRect.left - containerRect.left,
        y: elemRect.top - containerRect.top
      };
    };

    // ----- move event ----- //

    /**
     * drag move
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Draggabilly.prototype.dragMove = function (event, pointer, moveVector) {
      if (!this.isEnabled) {
        return;
      }
      var dragX = moveVector.x;
      var dragY = moveVector.y;

      var grid = this.options.grid;
      var gridX = grid && grid[0];
      var gridY = grid && grid[1];

      dragX = applyGrid(dragX, gridX);
      dragY = applyGrid(dragY, gridY);

      dragX = this.containDrag('x', dragX, gridX);
      dragY = this.containDrag('y', dragY, gridY);

      // constrain to axis
      dragX = this.options.axis == 'y' ? 0 : dragX;
      dragY = this.options.axis == 'x' ? 0 : dragY;

      this.position.x = this.startPosition.x + dragX;
      this.position.y = this.startPosition.y + dragY;
      // set dragPoint properties
      this.dragPoint.x = dragX;
      this.dragPoint.y = dragY;

      this.dispatchEvent('dragMove', event, [pointer, moveVector]);
    };

    function applyGrid(value, grid, method) {
      method = method || 'round';
      return grid ? Math[method](value / grid) * grid : value;
    }

    Draggabilly.prototype.containDrag = function (axis, drag, grid) {
      if (!this.options.containment) {
        return drag;
      }
      var measure = axis == 'x' ? 'width' : 'height';

      var rel = this.relativeStartPosition[axis];
      var min = applyGrid(-rel, grid, 'ceil');
      var max = this.containerSize[measure] - rel - this.size[measure];
      max = applyGrid(max, grid, 'floor');
      return Math.min(max, Math.max(min, drag));
    };

    // ----- end event ----- //

    /**
     * pointer up
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Draggabilly.prototype.pointerUp = function (event, pointer) {
      classie.remove(this.element, 'is-pointer-down');
      this.dispatchEvent('pointerUp', event, [pointer]);
      this._dragPointerUp(event, pointer);
    };

    /**
     * drag end
     * @param {Event} event
     * @param {Event or Touch} pointer
     */
    Draggabilly.prototype.dragEnd = function (event, pointer) {
      if (!this.isEnabled) {
        return;
      }
      this.isDragging = false;
      // use top left position when complete
      if (transformProperty) {
        this.element.style[transformProperty] = '';
        this.setLeftTop();
      }
      classie.remove(this.element, 'is-dragging');
      this.dispatchEvent('dragEnd', event, [pointer]);
    };

    // -------------------------- animation -------------------------- //

    Draggabilly.prototype.animate = function () {
      // only render and animate if dragging
      if (!this.isDragging) {
        return;
      }

      this.positionDrag();

      var _this = this;
      requestAnimationFrame(function animateFrame() {
        _this.animate();
      });
    };

    // transform translate function
    var translate = is3d ? function (x, y) {
      return 'translate3d( ' + x + 'px, ' + y + 'px, 0)';
    } : function (x, y) {
      return 'translate( ' + x + 'px, ' + y + 'px)';
    };

    // left/top positioning
    Draggabilly.prototype.setLeftTop = function () {
      this.element.style.left = this.position.x + 'px';
      this.element.style.top = this.position.y + 'px';
    };

    Draggabilly.prototype.positionDrag = transformProperty ? function () {
      // position with transform
      this.element.style[transformProperty] = translate(this.dragPoint.x, this.dragPoint.y);
    } : Draggabilly.prototype.setLeftTop;

    // ----- staticClick ----- //

    Draggabilly.prototype.staticClick = function (event, pointer) {
      this.dispatchEvent('staticClick', event, [pointer]);
    };

    // ----- methods ----- //

    Draggabilly.prototype.enable = function () {
      this.isEnabled = true;
    };

    Draggabilly.prototype.disable = function () {
      this.isEnabled = false;
      if (this.isDragging) {
        this.dragEnd();
      }
    };

    Draggabilly.prototype.destroy = function () {
      this.disable();
      // reset styles
      if (transformProperty) {
        this.element.style[transformProperty] = '';
      }
      this.element.style.left = '';
      this.element.style.top = '';
      this.element.style.position = '';
      // unbind handles
      this.unbindHandles();
      // remove jQuery data
      if (this.$element) {
        this.$element.removeData('draggabilly');
      }
    };

    // ----- jQuery bridget ----- //

    // required for jQuery bridget
    Draggabilly.prototype._init = noop;

    if (jQuery && jQuery.bridget) {
      jQuery.bridget('draggabilly', Draggabilly);
    }

    // -----  ----- //

    return Draggabilly;
  });
}).call(window);

/***/ }),

/***/ 5:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./common/static/xmodule/modules/js/000-58032517f54c5c1a704a908d850cbe64.js");
__webpack_require__("./common/static/xmodule/modules/js/001-3ed86006526f75d6c844739193a84c11.js");
__webpack_require__("./common/static/xmodule/modules/js/002-3918b2d4f383c04fed8227cc9f523d6e.js");
__webpack_require__("./common/static/xmodule/modules/js/003-d47e678753905042c21bbc110fb3f8d8.js");
__webpack_require__("./common/static/xmodule/modules/js/004-866df6ea65aa331217cdf46290ead28e.js");
module.exports = __webpack_require__("./common/static/xmodule/modules/js/005-26caba6f71877f63a7dd4f6796109bf6.js");


/***/ })

},[5])));
//# sourceMappingURL=CourseInfoBlockPreview.js.map