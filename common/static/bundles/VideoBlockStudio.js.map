{"version":3,"sources":["webpack:///./common/static/xmodule/descriptors/js/001-d7842ab69993e5eb58e8d4a4e80c23a2.js"],"names":["bind","fn","me","apply","arguments","TabsEditingDescriptor","isInactiveClass","element","onSwitchEditor","currentTab","$tabs","$","$content","find","each","_this","index","value","on","filter","length","first","html_id","closest","data","trigger","prototype","e","firstTime","$currentTarget","content_id","onSwitchFunction","previousTab","preventDefault","currentTarget","hasClass","Model","updateValue","modules","tabSwitch","isFunction","removeClass","addClass","attr","save","current_tab","off","getValue","setMetadataEditor","metadataEditor","getStorage","addToStorage","id","addModelUpdate","tabName","modelUpdateFunction","initialize","modelUpdate","addOnSwitch","Storage","call","window"],"mappings":"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","file":"VideoBlockStudio.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n// Once generated by CoffeeScript 1.9.3, but now lives as pure JS\n/* eslint-disable */\n(function() {\n  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  this.TabsEditingDescriptor = (function() {\n    TabsEditingDescriptor.isInactiveClass = \"is-inactive\";\n\n    function TabsEditingDescriptor(element) {\n      this.onSwitchEditor = bind(this.onSwitchEditor, this);\n      var currentTab;\n      this.element = element;\n\n      /*\n      Not tested on syncing of multiple editors of same type in tabs\n      (Like many CodeMirrors).\n       */\n      this.$tabs = $(\".tab\", this.element);\n      this.$content = $(\".component-tab\", this.element);\n      this.element.find('.editor-tabs .tab').each((function(_this) {\n        return function(index, value) {\n          return $(value).on('click', _this.onSwitchEditor);\n        };\n      })(this));\n\n      /*\n      If default visible tab is not setted or if were marked as current\n      more than 1 tab just first tab will be shown\n       */\n      currentTab = this.$tabs.filter('.current');\n      if (currentTab.length !== 1) {\n        currentTab = this.$tabs.first();\n      }\n      this.html_id = this.$tabs.closest('.wrapper-comp-editor').data('html_id');\n      currentTab.trigger(\"click\", [true, this.html_id]);\n    }\n\n    TabsEditingDescriptor.prototype.onSwitchEditor = function(e, firstTime, html_id) {\n      var $currentTarget, content_id, isInactiveClass, onSwitchFunction, previousTab;\n      e.preventDefault();\n      isInactiveClass = TabsEditingDescriptor.isInactiveClass;\n      $currentTarget = $(e.currentTarget);\n      if (!$currentTarget.hasClass('current') || firstTime === true) {\n        previousTab = null;\n        this.$tabs.each(function(index, value) {\n          if ($(value).hasClass('current')) {\n            return previousTab = $(value).data('tab_name');\n          }\n        });\n\n        /*\n        init and save data from previous tab\n         */\n        TabsEditingDescriptor.Model.updateValue(this.html_id, previousTab);\n\n        /*\n        Save data from editor in previous tab to editor in current tab here.\n        (to be implemented when there is a use case for this functionality)\n         */\n\n        // call onswitch\n        onSwitchFunction = TabsEditingDescriptor.Model.modules[this.html_id].tabSwitch[$currentTarget.data('tab_name')];\n        if ($.isFunction(onSwitchFunction)) {\n          onSwitchFunction();\n        }\n        this.$tabs.removeClass('current');\n        $currentTarget.addClass('current');\n\n        /*\n        Tabs are implemeted like anchors. Therefore we can use hash to find\n        corresponding content\n         */\n        content_id = $currentTarget.attr('href');\n        return this.$content.addClass(isInactiveClass).filter(content_id).removeClass(isInactiveClass);\n      }\n    };\n\n    TabsEditingDescriptor.prototype.save = function() {\n      var current_tab;\n      this.element.off('click', '.editor-tabs .tab', this.onSwitchEditor);\n      current_tab = this.$tabs.filter('.current').data('tab_name');\n      return {\n        data: TabsEditingDescriptor.Model.getValue(this.html_id, current_tab)\n      };\n    };\n\n    TabsEditingDescriptor.prototype.setMetadataEditor = function(metadataEditor) {\n      return TabsEditingDescriptor.setMetadataEditor.apply(TabsEditingDescriptor, arguments);\n    };\n\n    TabsEditingDescriptor.prototype.getStorage = function() {\n      return TabsEditingDescriptor.getStorage();\n    };\n\n    TabsEditingDescriptor.prototype.addToStorage = function(id, data) {\n      return TabsEditingDescriptor.addToStorage.apply(TabsEditingDescriptor, arguments);\n    };\n\n    TabsEditingDescriptor.Model = {\n      addModelUpdate: function(id, tabName, modelUpdateFunction) {\n\n        /*\n        Function that registers  'modelUpdate' functions of every tab.\n        These functions are used to update value, which will be returned\n        by calling save on component.\n         */\n        this.initialize(id);\n        return this.modules[id].modelUpdate[tabName] = modelUpdateFunction;\n      },\n      addOnSwitch: function(id, tabName, onSwitchFunction) {\n\n        /*\n        Function that registers functions invoked when switching\n        to particular tab.\n         */\n        this.initialize(id);\n        return this.modules[id].tabSwitch[tabName] = onSwitchFunction;\n      },\n      updateValue: function(id, tabName) {\n\n        /*\n        Function that invokes when switching tabs.\n        It ensures that data from previous tab is stored.\n        If new tab need this data, it should retrieve it from\n        stored value.\n         */\n        var modelUpdateFunction;\n        this.initialize(id);\n        modelUpdateFunction = this.modules[id]['modelUpdate'][tabName];\n        if ($.isFunction(modelUpdateFunction)) {\n          return this.modules[id]['value'] = modelUpdateFunction();\n        }\n      },\n      getValue: function(id, tabName) {\n\n        /*\n        Retrieves stored data on component save.\n        1. When we switching tabs - previous tab data is always saved to @[id].value\n        2. If current tab have registered 'modelUpdate' method, it should be invoked 1st.\n        (If we have edited in 1st tab, then switched to 2nd, 2nd tab should\n        care about getting data from @[id].value in onSwitch.)\n         */\n        if (!this.modules[id]) {\n          return null;\n        }\n        if ($.isFunction(this.modules[id]['modelUpdate'][tabName])) {\n          return this.modules[id]['modelUpdate'][tabName]();\n        } else {\n          if (typeof this.modules[id]['value'] === 'undefined') {\n            return null;\n          } else {\n            return this.modules[id]['value'];\n          }\n        }\n      },\n\n      /*\n      html_id's of descriptors will be stored in modules variable as\n      containers for callbacks.\n       */\n      modules: {},\n      Storage: {},\n      initialize: function(id) {\n\n        /*\n        Initialize objects per id. Id is html_id of descriptor.\n         */\n        this.modules[id] = this.modules[id] || {};\n        this.modules[id].tabSwitch = this.modules[id]['tabSwitch'] || {};\n        return this.modules[id].modelUpdate = this.modules[id]['modelUpdate'] || {};\n      }\n    };\n\n    TabsEditingDescriptor.setMetadataEditor = function(metadataEditor) {\n      return TabsEditingDescriptor.Model.Storage['MetadataEditor'] = metadataEditor;\n    };\n\n    TabsEditingDescriptor.addToStorage = function(id, data) {\n      return TabsEditingDescriptor.Model.Storage[id] = data;\n    };\n\n    TabsEditingDescriptor.getStorage = function() {\n      return TabsEditingDescriptor.Model.Storage;\n    };\n\n    return TabsEditingDescriptor;\n\n  })();\n\n}).call(this);\n\n}.call(window));\n\n\n// WEBPACK FOOTER //\n// ./common/static/xmodule/descriptors/js/001-d7842ab69993e5eb58e8d4a4e80c23a2.js"],"sourceRoot":""}